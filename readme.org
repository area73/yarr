* Yarr
*Yet Another RSS Reader*

*[[Live Demo][http://channikhabra.github.io/yarr/]]

[[http://i.imgur.com/VdFhZFG.png]]

Yarr is a small RSS reader we'll build using RxJS and ES2015 in this workshop session, with some spices:

- We'll not use any JS framework
- We'll use Virtual-DOM library for optimal DOM updates
- We'll use delegated events
- We'll use indexedDB for offline-storage of RSS feeds

** Objective
*** Not using any framework
- *Focus only on Rx*

  The objective we want to achieve with this tutorial is to start thinking in terms of Observables (we'll come to them later). Using a framework would add another layer to worry about (slash learn). We wanna focus exclusively on FRP aspect of RxJS, and not let more than necessary abstractions from other systems hinder us.

- *Come up with a sane architecture by ourself*

  Not really the objective, more of a wish. Let's see if we can come up with a saner architecture without stressing it too much, without relying on a framework to force our hand to do it a certain way. You've been warned, I am a 100% self-taught, don't blame me if we end up with a pile of horseshit ðŸ˜›

- *Fun*

  Let's just get out of the framework cage and take a breath in fresh air.

*** Using Virtual DOM
- *Focus only on FRP*

  Virtual DOM is awesome. It can do changes in rendered DOM much more optimally with much little effort (from our end). We don't want to get into the intricacies of doing *proper* DOM manipulations during the tutorial. We only have 90 minutes and we wanna focus on thinking in Observables.

  Moreover, Virtual-DOM actually help in creating a better architecture for our app. We'll see how.

*** Using delegated events
We'll see what they are and why we're using them later when we come to them.

At the end of the day, it's all a fun little app, and I expect you to have fun building it with me.

*** Personal Reasons
I created YARR for following personal reasons:

- For learning RxJS properly. Teaching is best learning they say, please feel at home for humbling me by pointing my mistakes in this code base
- Trying to roll something sane without using full-fledged frameworks. Mostly to test myself if I can come up with a decent architecture without having a framework forcing my hand to do so. When I found RxJS I saw a good resource to get over a big hurdle: propagation of change in the app.
- To Prepare workshop for jQuery-conf 2015. Now the conference went horrible, people there were simply not ready for ES6 let aside RxJS. I was kinda expecting it, so instead of just letting that prep time go to waste, I thought to make use of it and write a tutorial which might someone else on the Internet.

** How to Follow the tutorial
I've written this tutorial using git tags for chapters. We start with basic introduction to Rx, virtual-dom and then move ahead with writing a simplistic app.

If you just want to read the tutorial, you can do that on Github. Just go through the tags in this repo from 0 to 10.

If you want to follow along (you should):

- Clone this repo
- Checkout to tag 0
  #+begin_src bash
  git checkout 0-setup
  #+end_src
- Copy it over to another folder where you'll write the code
- Start with reading readme.org. It'll instruct you how to proceed

If you want to read the complete tutorial in a single document, there's also `complete-tutorial.org` committed in the final commit in which you can read all the chapters in a single document.

*How to run the app*

- Clone this repo and ~cd~ to the cloned folder
- Execute: ~npm install~
- You might need to install ~webpack~ and ~webpack-dev-server~ globally
  #+begin_src javascript
  npm install webpack webpack-dev-server -g
  #+end_src
- To check the app in development mode, just run ~webpack-dev-server~ and it'll run a server on ~localhost:8080~

*How to build*

- After above steps, execute this command:

  #+begin_src javascript
  NODE_ENV=production webpack -p
  #+end_src

- Now you can simply open ~index.html~ in your browser.

** What to expect

I am not expert at anything. I found RxJS couple months or so back, and I've been playing with it in my very little free time. I liked it a lot, and saw an opportunity to build something the way I wanted and I did. Keep your eyes open at all times while reading this tutorial. I don't mind if you point out some mistakes/wrong-decisions I've made, I appreciate it actually. I am a self-taught, that'll help me a lot. So please be my guest and humble me.

Other than that, here are few things this tutorial might have to offer:

- An app writing without using any frameworks
- The whole app is a long chain of operations on Observables. We'll try to get as close as possible to a system like this: [[http://i.imgur.com/1wMthve.png]]
  We'll fetch data from network, put it in indexedDb (the source), make it go through a long chain of operations, and put it in on the webpage (the sink).
- Persistent offline storage with IndexedDB
- Meteor like reactive client side db (although Meteor's client db is not persistent)
- Easter eggs, obvious/non-obvious mistakes made on purpose and otherwise

** Table of Contents

- *[[https://github.com/channikhabra/yarr/tree/0-setup][Chapter 0 : Setup]]*

  Just basic setup for webpack, npm packages to install etc.

- *[[https://github.com/channikhabra/yarr/tree/1-hello-rx][Chapter 1 : Intro to Observables]]*

  If you're new to Rx, this chapter will act as a small introduction. It's not extensive, more of just a brush up. If you haven't heard of Rx yet, you might like going through this [[http://channikhabra.github.io/frp-with-rxjs-jschannel-conf/#/][presentation]] (with [[https://github.com/channikhabra/frp-with-rxjs-jschannel-conf/blob/master/README.org][transcript]]).

- *[[https://github.com/channikhabra/yarr/tree/2-hello-vdom][Chapter 2 : Intro to Virtual-Dom]]*

  This chapter will introduce virtual-dom and we'll see how virtual-dom is used (not how it works). Again sort of brush up to bring us to same page.

- *[[https://github.com/channikhabra/yarr/tree/3-renderer][Chapter 3 : Components and Rendering System]]*

  I like React and the it allows writing code in terms of isolated components. That's the API we kinda-sorta try to achieve in this tutorial, and I think we get success to a fair length. We'll set a very slim rendering system, and some conventions about how we'll write our views as components and how we'll try to keep them isolated.

- *[[https://github.com/channikhabra/yarr/tree/4-delegated-events][Chapter 4 : Delegated Events]]*

  I don't like React's way of doing events (not that it's wrong, I just don't like it very much). So we'll do something very stupid and set a ridiculously simple (equally stupid) system for handing events in our app. Although stupid, this system will serve us well throughout the app.

- *[[https://github.com/channikhabra/yarr/tree/5-fetch-feeds-and-styles][Chapter 5 : Fetching Feeds and Styles]]*

  This will be an easy one, title is self explanatory I think.

- *[[https://github.com/channikhabra/yarr/tree/6-sidebar-controls-and-models][Chapter 6 : Models and Sidebar Controls]]*

  We'll keep our data in kinda-sorta models, and we'll add components for interacting with the app.

- *[[https://github.com/channikhabra/yarr/tree/7-offline-storage-with-dexiejs][Chapter 7 : Offline Storage with Dexie.js]]*

  We'll use dexie.js for using IndexedDB for making our app offline compatible. Dexie is a slim abstraction over IndexdDB. We'll take an offline first approach to build our app.

- *[[https://github.com/channikhabra/yarr/tree/8-reactive-dexie][Chapter 8 : Making Dexie.js reactive]]*

  I do a lot of work with Meteor.js, and I love the way it provides a kind of database on the client which is *reactive*. Reactive like you just change the data in the database, and UI (or whatever else) who's using that data will respond to the change. That's what we'll try to achieve in this chapter. e.g we'll just put feeds in our IndexedDB and they'll show up in UI automagically.

- *[[https://github.com/channikhabra/yarr/tree/9-bring-ui-to-life][Chapter 9 : Bring UI to Life]]*

  We'll make the controls we add in Chapter 6 actually work.

- *[[https://github.com/channikhabra/yarr/tree/10-reader-view][Chapter 10 : The Reader]]*

  The final piece of the puzzle. We'll create a component which'll parse HTML strings provided by our RSS feed to what virtual-dom understands (hyperscript), and show it in an elegant manner.
